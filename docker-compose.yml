version: '3.8'

services:
  # Data Pipeline
  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
      - "9092:9092"
      - "9404:9404"
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "metrics:1:1"
      KAFKA_OPTS: "-javaagent:/opt/kafka/jmx_prometheus_javaagent.jar=9404:/opt/kafka/kafka-2_0_0.yml -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9999"
      KAFKA_JMX_PORT: 9999
    volumes:
      - type: bind
        source: ./kafka/jmx_prometheus_javaagent.jar
        target: /opt/kafka/jmx_prometheus_javaagent.jar
        read_only: true
      - type: bind
        source: ./kafka/kafka-2_0_0.yml
        target: /opt/kafka/kafka-2_0_0.yml
        read_only: true
    depends_on:
      zookeeper:
        condition: service_started

  spark:
    image: apache/spark:3.4.1
    user: "185:185"
    ports:
      - "8080:8080"
      - "7077:7077"
      - "9091:9091"
    environment:
      SPARK_NO_DAEMONIZE: "1"
      SPARK_MASTER_OPTS: "-javaagent:/opt/spark/jmx_prometheus_javaagent.jar=9091:/opt/spark/spark-jmx.yml -Dspark.metrics.conf=/opt/spark/conf/metrics.properties -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
    volumes:
      - type: bind
        source: ./spark/metrics.properties
        target: /opt/spark/conf/metrics.properties
        read_only: true
      - type: bind
        source: ./prometheus/jmx_prometheus_javaagent.jar
        target: /opt/spark/jmx_prometheus_javaagent.jar
        read_only: true
      - type: bind
        source: ./prometheus/spark-jmx.yml
        target: /opt/spark/spark-jmx.yml
        read_only: true
    command: "/opt/spark/bin/spark-class org.apache.spark.deploy.master.Master"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  ml_service:
    build:
      context: ./ml_service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./ml_service:/app
    depends_on:
      - kafka

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./backend:/app
    depends_on:
      timescaledb:
        condition: service_healthy
      ml_service:
        condition: service_started
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Time-series Database
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:password@timescaledb:5432/metrics?sslmode=disable"
    depends_on:
      timescaledb:
        condition: service_healthy

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  timescaledb_data:
  prometheus_data:
  grafana_data:
  jmx-data: